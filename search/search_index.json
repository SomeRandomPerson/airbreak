{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Jailbreak your CPAP machine with Airbreak In light of the COVID-19 crisis and resultant shortage of medical equipment, hospitals have developed protocols for using BiPAP (BIlevel Positive Airway Pressure) machines as non-invasive ventilators , the FDA has approved the use of these modified BiPAP devices as ventilators , and several groups are currently working on ventilator designs that involve a converted BiPAP. However, CPAP (Constant Positive Airway Pressure) devices are cheaper, more widely available, and similar both electrically and mechanically. Unfortunately, they are lacking in some features that the physicians require and, according to their manufacturer, CPAP machines \" would require significant rework in order to function as a ventilator \". What we have done it to \" jailbreak \" the the Airsense 10 CPAP machine, a common, low-cost sleep therapy device intended to treat sleep apnea, so that it is possible to run additional tasks on the device. These new tasks add the features and adjust the range of parameters that make it possible to use the device as a temporary ventilator. This can help ease the shortage until more real ventilators are available. Our changes bring the Airsense S10 to near feature parity with BiPAP machines from the same manufacturer, boost the maximum pressure output available, and provide a starting point to add more advanced emergency ventilator functionality. Disclaimer While we are consulting with doctors to validate that the modified firmware works as intended, the codebase in its current form should be considered a proof of concept and is not intended for use in a life-support capacity . Please see the FAQ for more information. No IP belonging to device manufacturers is hosted in this repository, nor will it be accepted as a pull request. Major features Adds a Pressure Control Ventilator (PCV) mode that oscillates between high and low pressure at a configurable breathing rate (stock firmware supports only a single pressure, with no breath rate control) Allows maximum pressure to be increased to 30 cm H 2 O, as required by clinical protocols (stock firmware is 20cm H 2 O) Allows smooth rapid pressure change rates (stock firmware changes pressure at less than 1 cm/sec) Unlocks all of the vendor modes and tunable configuration parameters Provides access to all of the sensors (flow, pressure, temperature, etc) Displays real-time graphs on the screen to show an immediate history of sensor data Development features Closed loop air pressure control with backup respiration rates (\"VAPS\" mode) Visual and audible alarms when flow stoppage or leakage rates are detected GPIO interface with other systems Display statistics in conformance with Rapidly Manufactured Ventilator Standards FAQ What's the difference between the CPAP and BiPAP machines? The Airsense 10 that we have modified is a low cost sleep therapy device that provides a Constant air pressure to help with sleep apnea and other disorders. Adding a homebrew function to the existing firmware that alternate between pressures with a configurable delay allows the CPAP to effectively function as a Pressure Control Ventilator for sedated patients. The BiPAP machines can also produce two levels of pressure and they also have the ability to synchronize with the patient's breathing, which allows them to be used a temporary ventilators for non-sedated patients. Enabling the vendor's BiPAP mode on the CPAP machines appears to work; the respiration rate is detected and the backup respiration rate takes over if the user stops breathing. This indicates that there are sufficient sensors in the CPAP machine to perform the same functions as the BiPAP. Further customization for clincal use is possible by writing new extensions for the firmware in the machine. Can jailbroken CPAP devices be used to treat COVID patients? We want to be very clear here: this modified firmware should not be flashed on CPAP machines and used to treat COVID patients immediately. The firmware that we've developed is an effective demonstration of the capability, and while it has been reviewed and validated by expert researchers, biomedical engineers, and clinical pulmonologists , it has not yet been put through FDA approval. Additionally, the Mt Sinai's protocols for off-label non-invasive ventilation require additional modifications such as viral filter and remote control before the machines would be ready for clinical use. Could hacked machines alleviate the shortage of ventilators? If the manufacturers developed their own firmware updates, or the FDA approves our jailbroken firmware, this could have an extremely large role in bridging the ventilator shortage gap. There are millions of unused or underutilized CPAP and BiPAP devices sitting in closets in America, and roughly another 500,000 units in warehouses in the country. These devices can be used as an alternate ventilator, for low-resource hospitals who are still waiting for the hospital ventilators to arrive. Could homebrew firmware go through FDA approval? If there were no other option, our firmware could go through FDA approval, but we believe that the best route for rolling out these upgrades is to work with the manufacturers to use their resources to validate and distribute these upgrades safely and at scale. There are three main factors at play here: The first is a regulatory/safety one: Under the recently-released FDA guidance on hardware and software modification of CPAP and BiPAP devices to treat COVID patients, the manufacturer has a carte blanche to release an updated version of their firmware for their own devices without requiring explicit FDA approval -- they are in the best position from a technical, expertise, safety and regulatory perspective. The second is a practical one: There are many different models of CPAP and BiPAP devices, and reverse-engineering is a slow and painful process. We modified the firmware on the most common model of CPAP in America in about a week, but to get lots of ventilators quickly, you'd need a firmware modification for every mode of CPAP. What we've found in our work is that the work needed for the manufacturer to implement these upgrades is pretty minimal -- the manufacturer has access to the source code, to the schematics, and to the engineers who are intimately familiar with physiology and safety standards. We've found that, in many cases, the bulk of the work has already gone through FDA approval, like the iVAPS menu that is in the firmware on the ResMed Airsense device. Even if other manufacturers had not written a line of code for their CPAP models, the simple pressure-control ventilator mode that we were able to implement is very simple to develop, is designed to work on every CPAP device in existence, and would be a very low technology and regulatory barrier for manufacturers who have the right people and resources. The third is related to making these jailbreaks at scale: We could take in every unused CPAP device in the country, unscrew the case and re-flash the firmware . It's slow and expensive but could be solved with lots and lots of people. The thing is, of the 8 million CPAPs in the country, almost all 5 million shipped over the last 3 years have a cellular IoT connection that is always on, reporting back usage information to the doctors and the insurance companies. That cellular connection also has over-the-air upgrade capability that can only be accessed from within the IT infrastructure of the device manufacturers. This is a big deal -- it means that they can selectively upgrade, by serial number, specific units to function as ventilators, without having to open them up -- it can all work over the air. So what's the point? What our firmware does is show that it is possible to re-program these devices in a way that doctors can use to effectively ventilate COVID patients. We have been able to confirm the functionality of the devices in instrumented patient circuits operated by experts in pulmonological measurement. And there are doctors who agree that, if they had an FDA-approved machine that could that can do what these machines are doing, then they could use them to clinically ventilate COVID patients in an ICU. We do have a path to get this firmware through FDA, and we would apply for FDA approval under the Emergency Use Authorization if the manufacturers absolutely refused to cooperate, but the safest and best path is for the manufacturers to enable this upgrade on their own. Separately from the very pressing COVID issues, Airbreak allows CPAP device owners to write their own extensions to customize their devices for their needs , similar to what the Magic Lantern firmware does for cameras. They can add features like the on-screen graphs shown above, or integrate external systems through the expansion port. Additionally, these tools allow the owners and users to gain a better understand their own therapy by gaining access to the sensors on the device. More details Clinical evaluation Disassembly and wiring instructions Firmware flashing guide Writing extensions github.com/osresearch/airbreak info@airbreak.dev","title":"About"},{"location":"#jailbreak-your-cpap-machine-with-airbreak","text":"In light of the COVID-19 crisis and resultant shortage of medical equipment, hospitals have developed protocols for using BiPAP (BIlevel Positive Airway Pressure) machines as non-invasive ventilators , the FDA has approved the use of these modified BiPAP devices as ventilators , and several groups are currently working on ventilator designs that involve a converted BiPAP. However, CPAP (Constant Positive Airway Pressure) devices are cheaper, more widely available, and similar both electrically and mechanically. Unfortunately, they are lacking in some features that the physicians require and, according to their manufacturer, CPAP machines \" would require significant rework in order to function as a ventilator \". What we have done it to \" jailbreak \" the the Airsense 10 CPAP machine, a common, low-cost sleep therapy device intended to treat sleep apnea, so that it is possible to run additional tasks on the device. These new tasks add the features and adjust the range of parameters that make it possible to use the device as a temporary ventilator. This can help ease the shortage until more real ventilators are available. Our changes bring the Airsense S10 to near feature parity with BiPAP machines from the same manufacturer, boost the maximum pressure output available, and provide a starting point to add more advanced emergency ventilator functionality.","title":"Jailbreak your CPAP machine with Airbreak"},{"location":"#disclaimer","text":"While we are consulting with doctors to validate that the modified firmware works as intended, the codebase in its current form should be considered a proof of concept and is not intended for use in a life-support capacity . Please see the FAQ for more information. No IP belonging to device manufacturers is hosted in this repository, nor will it be accepted as a pull request.","title":"Disclaimer"},{"location":"#major-features","text":"Adds a Pressure Control Ventilator (PCV) mode that oscillates between high and low pressure at a configurable breathing rate (stock firmware supports only a single pressure, with no breath rate control) Allows maximum pressure to be increased to 30 cm H 2 O, as required by clinical protocols (stock firmware is 20cm H 2 O) Allows smooth rapid pressure change rates (stock firmware changes pressure at less than 1 cm/sec) Unlocks all of the vendor modes and tunable configuration parameters Provides access to all of the sensors (flow, pressure, temperature, etc) Displays real-time graphs on the screen to show an immediate history of sensor data","title":"Major features"},{"location":"#development-features","text":"Closed loop air pressure control with backup respiration rates (\"VAPS\" mode) Visual and audible alarms when flow stoppage or leakage rates are detected GPIO interface with other systems Display statistics in conformance with Rapidly Manufactured Ventilator Standards","title":"Development features"},{"location":"#faq","text":"","title":"FAQ"},{"location":"#whats-the-difference-between-the-cpap-and-bipap-machines","text":"The Airsense 10 that we have modified is a low cost sleep therapy device that provides a Constant air pressure to help with sleep apnea and other disorders. Adding a homebrew function to the existing firmware that alternate between pressures with a configurable delay allows the CPAP to effectively function as a Pressure Control Ventilator for sedated patients. The BiPAP machines can also produce two levels of pressure and they also have the ability to synchronize with the patient's breathing, which allows them to be used a temporary ventilators for non-sedated patients. Enabling the vendor's BiPAP mode on the CPAP machines appears to work; the respiration rate is detected and the backup respiration rate takes over if the user stops breathing. This indicates that there are sufficient sensors in the CPAP machine to perform the same functions as the BiPAP. Further customization for clincal use is possible by writing new extensions for the firmware in the machine.","title":"What's the difference between the CPAP and BiPAP machines?"},{"location":"#can-jailbroken-cpap-devices-be-used-to-treat-covid-patients","text":"We want to be very clear here: this modified firmware should not be flashed on CPAP machines and used to treat COVID patients immediately. The firmware that we've developed is an effective demonstration of the capability, and while it has been reviewed and validated by expert researchers, biomedical engineers, and clinical pulmonologists , it has not yet been put through FDA approval. Additionally, the Mt Sinai's protocols for off-label non-invasive ventilation require additional modifications such as viral filter and remote control before the machines would be ready for clinical use.","title":"Can jailbroken CPAP devices be used to treat COVID patients?"},{"location":"#could-hacked-machines-alleviate-the-shortage-of-ventilators","text":"If the manufacturers developed their own firmware updates, or the FDA approves our jailbroken firmware, this could have an extremely large role in bridging the ventilator shortage gap. There are millions of unused or underutilized CPAP and BiPAP devices sitting in closets in America, and roughly another 500,000 units in warehouses in the country. These devices can be used as an alternate ventilator, for low-resource hospitals who are still waiting for the hospital ventilators to arrive.","title":"Could hacked machines alleviate the shortage of ventilators?"},{"location":"#could-homebrew-firmware-go-through-fda-approval","text":"If there were no other option, our firmware could go through FDA approval, but we believe that the best route for rolling out these upgrades is to work with the manufacturers to use their resources to validate and distribute these upgrades safely and at scale. There are three main factors at play here: The first is a regulatory/safety one: Under the recently-released FDA guidance on hardware and software modification of CPAP and BiPAP devices to treat COVID patients, the manufacturer has a carte blanche to release an updated version of their firmware for their own devices without requiring explicit FDA approval -- they are in the best position from a technical, expertise, safety and regulatory perspective. The second is a practical one: There are many different models of CPAP and BiPAP devices, and reverse-engineering is a slow and painful process. We modified the firmware on the most common model of CPAP in America in about a week, but to get lots of ventilators quickly, you'd need a firmware modification for every mode of CPAP. What we've found in our work is that the work needed for the manufacturer to implement these upgrades is pretty minimal -- the manufacturer has access to the source code, to the schematics, and to the engineers who are intimately familiar with physiology and safety standards. We've found that, in many cases, the bulk of the work has already gone through FDA approval, like the iVAPS menu that is in the firmware on the ResMed Airsense device. Even if other manufacturers had not written a line of code for their CPAP models, the simple pressure-control ventilator mode that we were able to implement is very simple to develop, is designed to work on every CPAP device in existence, and would be a very low technology and regulatory barrier for manufacturers who have the right people and resources. The third is related to making these jailbreaks at scale: We could take in every unused CPAP device in the country, unscrew the case and re-flash the firmware . It's slow and expensive but could be solved with lots and lots of people. The thing is, of the 8 million CPAPs in the country, almost all 5 million shipped over the last 3 years have a cellular IoT connection that is always on, reporting back usage information to the doctors and the insurance companies. That cellular connection also has over-the-air upgrade capability that can only be accessed from within the IT infrastructure of the device manufacturers. This is a big deal -- it means that they can selectively upgrade, by serial number, specific units to function as ventilators, without having to open them up -- it can all work over the air.","title":"Could homebrew firmware go through FDA approval?"},{"location":"#so-whats-the-point","text":"What our firmware does is show that it is possible to re-program these devices in a way that doctors can use to effectively ventilate COVID patients. We have been able to confirm the functionality of the devices in instrumented patient circuits operated by experts in pulmonological measurement. And there are doctors who agree that, if they had an FDA-approved machine that could that can do what these machines are doing, then they could use them to clinically ventilate COVID patients in an ICU. We do have a path to get this firmware through FDA, and we would apply for FDA approval under the Emergency Use Authorization if the manufacturers absolutely refused to cooperate, but the safest and best path is for the manufacturers to enable this upgrade on their own. Separately from the very pressing COVID issues, Airbreak allows CPAP device owners to write their own extensions to customize their devices for their needs , similar to what the Magic Lantern firmware does for cameras. They can add features like the on-screen graphs shown above, or integrate external systems through the expansion port. Additionally, these tools allow the owners and users to gain a better understand their own therapy by gaining access to the sensors on the device.","title":"So what's the point?"},{"location":"#more-details","text":"Clinical evaluation Disassembly and wiring instructions Firmware flashing guide Writing extensions github.com/osresearch/airbreak info@airbreak.dev","title":"More details"},{"location":"disassembly/","text":"Disassembly In order to dump and replace the device firmware, we need to access the programming port. Unforunately it is inside the machine so it requires some disassembly to reach. Tools You will need the following: Torx T15 ST-Link/V2 STM32 programmer or clone TC2050-IDC or TC2050-ICD-NL programming adapter 4 male-female 0.1\" jumpers Computer with OpenOCD and some Unix familiarity arm-none-eabi-gcc to compile extensions (not necessary to unlock the device) It is difficult but possible to solder directly to the PCB, which relaxes the requirement for the jumpers and programming adapter. For more information on this, see the list of useful test points . First you'll need a Torx T15 driver to remove unscrew the three faceplate screws. The bottom latches need to be pried open with a flat head or a spudger. The knob needs to be pulled firmly straight away from the board to remove it, which will allow the gasket to be removed. Be careful while popping it off the start button on the top of the device. It is not necessary to remove the circuit board from the device. Wiring TC2050-IDC is useful for development since it has legs that attach to the board. For higher throughput flashing the TC2050-ICD-NL is easier to hookup, but requires someone to hold it in place while the device is reflashed with custom firmware. The pinout of this port is not the usual 10-pin ARM debug header; it combines the programming pins for the STM32 that is the main controller, the auxillary STM8, and the PMIC. Board footprint layout (you don't need this unless you're soldering to the board): Function Pin Pin Function STM32_VDD 1 (square) 2 STM32_NRST STM32_SWDIO 3 4 STM8_SWIM STM8_VDD 5 6 PMIC_TDI STM32_SWCLK 7 8 STM8_TLI GND 9 10 PMIC_TDO The ST-Link/V2 programming device is used for flashing and debugging the code on the STM32. It has a different pinout from the TC2050 cable, so it is necessary to use some male-female 0.1\" jumpers to connect the four STM32 programming pins on the TC2050 to the STlink. TC2050 ribbon cable pinout: Function Pin Pin Function STM32_VDD 1 (red) 3 STM32_SWDIO STM8_VDD 5 7 STM32_SWCLK GND 9 10 PMIC_TDO STM8_TLI 8 6 PMIC_TDI STM8_SWIM 4 2 STM32_NRST STlink-V2 pinout: Function Pin Pin Function STM32_VDD 1 2 NC NC 3 4 NC NC 5 6 NC STM32_SWDIO 7 8 NC STM32_SWCLK 9 10 NC NC 11 12 NC NC 13 14 NC STM32_NRST 15 16 NC NC 17 18 NC NC 19 20 GND Warning A genuine ST-Link programmer uses the STM32_VDD pin to detect the target voltage, not to provide power. Connecting a generic programmer or a Raspberry Pi with this pin configuration will cause the programmer to be back-powered through the AirSense PCB. If you are using a SWD programmer other than the ST-Link, do not hook up STM32_VDD to your 3.3V pin or you may risk damaging your board, programmer, or both! Okay, now you're ready to flash the firmware!","title":"Disassembly"},{"location":"disassembly/#disassembly","text":"In order to dump and replace the device firmware, we need to access the programming port. Unforunately it is inside the machine so it requires some disassembly to reach.","title":"Disassembly"},{"location":"disassembly/#tools","text":"You will need the following: Torx T15 ST-Link/V2 STM32 programmer or clone TC2050-IDC or TC2050-ICD-NL programming adapter 4 male-female 0.1\" jumpers Computer with OpenOCD and some Unix familiarity arm-none-eabi-gcc to compile extensions (not necessary to unlock the device) It is difficult but possible to solder directly to the PCB, which relaxes the requirement for the jumpers and programming adapter. For more information on this, see the list of useful test points . First you'll need a Torx T15 driver to remove unscrew the three faceplate screws. The bottom latches need to be pried open with a flat head or a spudger. The knob needs to be pulled firmly straight away from the board to remove it, which will allow the gasket to be removed. Be careful while popping it off the start button on the top of the device. It is not necessary to remove the circuit board from the device.","title":"Tools"},{"location":"disassembly/#wiring","text":"TC2050-IDC is useful for development since it has legs that attach to the board. For higher throughput flashing the TC2050-ICD-NL is easier to hookup, but requires someone to hold it in place while the device is reflashed with custom firmware. The pinout of this port is not the usual 10-pin ARM debug header; it combines the programming pins for the STM32 that is the main controller, the auxillary STM8, and the PMIC. Board footprint layout (you don't need this unless you're soldering to the board): Function Pin Pin Function STM32_VDD 1 (square) 2 STM32_NRST STM32_SWDIO 3 4 STM8_SWIM STM8_VDD 5 6 PMIC_TDI STM32_SWCLK 7 8 STM8_TLI GND 9 10 PMIC_TDO The ST-Link/V2 programming device is used for flashing and debugging the code on the STM32. It has a different pinout from the TC2050 cable, so it is necessary to use some male-female 0.1\" jumpers to connect the four STM32 programming pins on the TC2050 to the STlink. TC2050 ribbon cable pinout: Function Pin Pin Function STM32_VDD 1 (red) 3 STM32_SWDIO STM8_VDD 5 7 STM32_SWCLK GND 9 10 PMIC_TDO STM8_TLI 8 6 PMIC_TDI STM8_SWIM 4 2 STM32_NRST STlink-V2 pinout: Function Pin Pin Function STM32_VDD 1 2 NC NC 3 4 NC NC 5 6 NC STM32_SWDIO 7 8 NC STM32_SWCLK 9 10 NC NC 11 12 NC NC 13 14 NC STM32_NRST 15 16 NC NC 17 18 NC NC 19 20 GND Warning A genuine ST-Link programmer uses the STM32_VDD pin to detect the target voltage, not to provide power. Connecting a generic programmer or a Raspberry Pi with this pin configuration will cause the programmer to be back-powered through the AirSense PCB. If you are using a SWD programmer other than the ST-Link, do not hook up STM32_VDD to your 3.3V pin or you may risk damaging your board, programmer, or both! Okay, now you're ready to flash the firmware!","title":"Wiring"},{"location":"evaluation/","text":"Clincal Evaluation To be written. Currently the modified firmware is being evaluated by research labs and pulmnologists. There are other pieces necessary to use the devices in a clinical setting, such as virus filters, O2 inputs, remote access consoles, alarms, etc. Mt Sinai's BiPAP protocols for non-invasive ventilation provide a roadmap for how these modified CPAP devices could be used. The UK's Rapidly Manufactured Ventilator Standards have criteria that should be met before this sort of modification can be deployed. Does running the pump at 30 cm H 2 O cause a reduction in the life of the machine?","title":"Evaluation"},{"location":"evaluation/#clincal-evaluation","text":"To be written. Currently the modified firmware is being evaluated by research labs and pulmnologists. There are other pieces necessary to use the devices in a clinical setting, such as virus filters, O2 inputs, remote access consoles, alarms, etc. Mt Sinai's BiPAP protocols for non-invasive ventilation provide a roadmap for how these modified CPAP devices could be used. The UK's Rapidly Manufactured Ventilator Standards have criteria that should be met before this sort of modification can be deployed. Does running the pump at 30 cm H 2 O cause a reduction in the life of the machine?","title":"Clincal Evaluation"},{"location":"firmware/","text":"Firmware Connecting to Device Note If you are using Windows, the steps in this section will be slightly different. Please see the Windows guide for more information. We are going to use the open-source OpenOCD debug interface to access the device. First, make sure this repository is cloned and set to your current working directory. Make sure your programmer is attached to the PCB , then start OpenOCD. If you are using a programmer other than the STlink, you will need to select the correct interface. sudo openocd -f interface/stlink.cfg -f 'tcl/airsense.cfg' If your device is connected properly, you should see a bunch of output, ending with: Info : stm32f4x.cpu: hardware has 6 breakpoints, 4 watchpoints In another terminal, connect to the OpenOCD server: telnet localhost 4444 Once your OpenOCD console is successfully connected, you can continue to the next step. Dumping Vendor Firmware Warning This step is mandatory. Each subsequent step requires an original copy of the device firmware to be present in the working directory. With an original copy of the firmware, the device can always be restored to factory settings. If you lose the original firmware, you risk bricking your device! Type dump into the OpenOCD console. It will take several seconds for all of the different regions to be copied from the device and deposited into the stm32/ subdirectory. Building Alternate Firmware Flashing In a third terminal window, patch the extracted firmware in stm32/bank0.bin with the patch-airsense script. This will will unlock the vendor modes and configuration bits. ./patch-airsense stm32/bank0.bin stm32-unlocked.bin The script might fail if the hashes of your extracted firmware do not match the one that it expects (currently SX567-0401 ). If you have a different version, please contact us for how to procede. Now reflash the device with the modified firmware by going back to the OpenOCD console terminal and running: stm32f2x options_write 0 0x2c reset halt flash write_image erase stm32-unlocked.bin 0x8000000 reset run The write_image step takes around 20 seconds and the device should reboot afterwards. Testing After the device has been reflashed and rebooted, you can enter the clinician menu (hold down the Home button while pushing on the knob for three seconds), and you should be able to select from all of the vendor modes, including iVAPS and ST. These modes potentially allow the CPAP device to immediately be used according to the Mt Sinai BiPAP protocol. The flashing is a one-time operation. The programmer can be unplugged and moved to another device. Restoring the vendor firmware Restoring the old firmware is possible; there are some RTC variables that need to be adjusted. Script to be provided.","title":"Firmware"},{"location":"firmware/#firmware","text":"","title":"Firmware"},{"location":"firmware/#connecting-to-device","text":"Note If you are using Windows, the steps in this section will be slightly different. Please see the Windows guide for more information. We are going to use the open-source OpenOCD debug interface to access the device. First, make sure this repository is cloned and set to your current working directory. Make sure your programmer is attached to the PCB , then start OpenOCD. If you are using a programmer other than the STlink, you will need to select the correct interface. sudo openocd -f interface/stlink.cfg -f 'tcl/airsense.cfg' If your device is connected properly, you should see a bunch of output, ending with: Info : stm32f4x.cpu: hardware has 6 breakpoints, 4 watchpoints In another terminal, connect to the OpenOCD server: telnet localhost 4444 Once your OpenOCD console is successfully connected, you can continue to the next step.","title":"Connecting to Device"},{"location":"firmware/#dumping-vendor-firmware","text":"Warning This step is mandatory. Each subsequent step requires an original copy of the device firmware to be present in the working directory. With an original copy of the firmware, the device can always be restored to factory settings. If you lose the original firmware, you risk bricking your device! Type dump into the OpenOCD console. It will take several seconds for all of the different regions to be copied from the device and deposited into the stm32/ subdirectory.","title":"Dumping Vendor Firmware"},{"location":"firmware/#building-alternate-firmware","text":"","title":"Building Alternate Firmware"},{"location":"firmware/#flashing","text":"In a third terminal window, patch the extracted firmware in stm32/bank0.bin with the patch-airsense script. This will will unlock the vendor modes and configuration bits. ./patch-airsense stm32/bank0.bin stm32-unlocked.bin The script might fail if the hashes of your extracted firmware do not match the one that it expects (currently SX567-0401 ). If you have a different version, please contact us for how to procede. Now reflash the device with the modified firmware by going back to the OpenOCD console terminal and running: stm32f2x options_write 0 0x2c reset halt flash write_image erase stm32-unlocked.bin 0x8000000 reset run The write_image step takes around 20 seconds and the device should reboot afterwards.","title":"Flashing"},{"location":"firmware/#testing","text":"After the device has been reflashed and rebooted, you can enter the clinician menu (hold down the Home button while pushing on the knob for three seconds), and you should be able to select from all of the vendor modes, including iVAPS and ST. These modes potentially allow the CPAP device to immediately be used according to the Mt Sinai BiPAP protocol. The flashing is a one-time operation. The programmer can be unplugged and moved to another device.","title":"Testing"},{"location":"firmware/#restoring-the-vendor-firmware","text":"Restoring the old firmware is possible; there are some RTC variables that need to be adjusted. Script to be provided.","title":"Restoring the vendor firmware"},{"location":"info/datasheets/","text":"","title":"Datasheets"},{"location":"info/extensions/","text":"Writing extensions There are currently two example extensions: breath.c and graph.c . The breathing mod implements a Pressure Control Ventilator with programmable pressure and respiration rate. The graphing mod adds a strip chart for the current commanded pressure and the actual output pressure. This is similar to Magic Lantern , since we use the existing vendor firmware as a library with functions at fixed addresses and fit into the empty space around the flash image. The ghidra XML file can be converted into the stubs.S that provides labels at the fixed locations. More documentation needs to be written. Ghidra files. Data structures. Configuration and variables. GUI library is based on the closed source emwin, although the reference manual is available and can be used to derive the headers and structures required to interface with the library. GPIO library is the STM32 Standard Peripheral Library. There is a hard-float unit in the CPU, but some float/double ops seem to cause a fault. Be sure that all of your constants have an explicit float type like 0.1f , otherwise gcc will use doubles.","title":"Development"},{"location":"info/extensions/#writing-extensions","text":"There are currently two example extensions: breath.c and graph.c . The breathing mod implements a Pressure Control Ventilator with programmable pressure and respiration rate. The graphing mod adds a strip chart for the current commanded pressure and the actual output pressure. This is similar to Magic Lantern , since we use the existing vendor firmware as a library with functions at fixed addresses and fit into the empty space around the flash image. The ghidra XML file can be converted into the stubs.S that provides labels at the fixed locations. More documentation needs to be written. Ghidra files. Data structures. Configuration and variables. GUI library is based on the closed source emwin, although the reference manual is available and can be used to derive the headers and structures required to interface with the library. GPIO library is the STM32 Standard Peripheral Library. There is a hard-float unit in the CPU, but some float/double ops seem to cause a fault. Be sure that all of your constants have an explicit float type like 0.1f , otherwise gcc will use doubles.","title":"Writing extensions"},{"location":"info/firmware-docs/","text":"","title":"Documentation"},{"location":"info/pinouts/","text":"","title":"Pinouts"},{"location":"info/tcl/","text":"","title":"OpenOCD Scripts"},{"location":"info/testpoints/","text":"","title":"Useful Test Points"},{"location":"info/windows/","text":"Using OpenOCD with Windows Install Git Bash Set up path to scripts directory Enable telnet Disable TCL server","title":"Windows Setup Instructions"},{"location":"info/windows/#using-openocd-with-windows","text":"","title":"Using OpenOCD with Windows"},{"location":"info/windows/#install-git-bash","text":"","title":"Install Git Bash"},{"location":"info/windows/#set-up-path-to-scripts-directory","text":"","title":"Set up path to scripts directory"},{"location":"info/windows/#enable-telnet","text":"","title":"Enable telnet"},{"location":"info/windows/#disable-tcl-server","text":"","title":"Disable TCL server"}]}